buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.6"
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
}

group "mcsp"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"com.energizedwork.idea-project-components"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"

    runtime 'mysql:mysql-connector-java:5.1.45'
    compile 'org.grails:grails-datastore-rest-client'
    compile 'org.grails.plugins:mail:2.0.0'
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

webdriverBinaries {
    chromedriver '2.32'
    geckodriver '0.18.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
}

//---------------- docker ------------------------

task buildDockerApp(dependsOn: 'war') {
    group 'docker'
    description 'Build docker app'
    def dockerFileTemp = file("src/docker/Dockerfile")
    def warFile = file("${war.archivePath}")
    def warName = "${war.baseName}.${war.extension}"
    ext.dockerAppDir = 'build/docker/app'
    ext.dockerAppDockerfile = "${ext.dockerAppDir}/Dockerfile"
    inputs.file(dockerFileTemp)
    inputs.file(warFile)
    inputs.property("warName", warName)
    inputs.property("dockerUserName", "${dockerUserName}")
    inputs.property("dockerPassword", "${dockerPassword}")
    inputs.property("dockerRegistry", "${dockerRegistry}")
    inputs.property("dockerImageName", "${dockerImageName}")
    outputs.dir(ext.dockerAppDir)
    doFirst {
        println ">> Build docker app: ${ext.dockerAppDir}"
    }
    doLast {
        copy {
            from warFile
            into ext.dockerAppDir
            rename war.archiveName, warName
        }
        copy {
            from dockerFileTemp
            into ext.dockerAppDir
            expand(warName: warName)
        }
    }
}

task buildDockerImage(type: Exec, dependsOn: 'buildDockerApp') {
    group 'docker'
    description 'Build a docker image'
    commandLine 'docker', 'build', '-f', "${buildDockerApp.dockerAppDockerfile}", '-t', "${dockerImageName}", "${buildDockerApp.dockerAppDir}"
    doFirst {
        println ">> Creating docker image: ${dockerImageName}"
    }
    onlyIf { buildDockerApp.didWork || project.hasProperty('forceBuildDockerImage') }
}

task removeDanglingImage(type: Exec) {
    group 'docker'
    description 'Remove dangling docker images'
    commandLine 'docker', 'image', 'prune', '-f'
    doFirst {
        println ">> Remove dangling docker images"
    }
}

task pushDockerImage(type: Exec, dependsOn: 'buildDockerImage') {
    group 'docker'
    description 'Push a docker image into docker registry'
    commandLine 'docker', 'login', '-u', "${dockerUserName}", '-p', "${dockerPassword}", "${dockerRegistry}"
    commandLine 'docker', 'push', "${dockerImageName}"
    doFirst {
        println ">> pushing image: ${dockerImageName}"
    }
    onlyIf { buildDockerImage.didWork || project.hasProperty('forcePushDockerImage') }
}

task docker(dependsOn: ['pushDockerImage', 'removeDanglingImage']) {
    group 'docker'
    description 'Default task for docker group, which will build and push docker image, and prune dangling image'
}

//---------------- default tasks ------------------------

defaultTasks 'docker'

//---------------- app ------------------------

task installAppDependencies(type: NpmTask) {
    group 'app'
    description = "Installs dependencies from package.json"
    workingDir = file("${project.projectDir}/src/app")
    args = ['install']
    doFirst {
        println ">> Installing app dependencies"
    }
}

task buildApp(type: NpmTask,dependsOn: 'installAppDependencies') {
    group 'app'
    description 'Building app.'
    workingDir = file("${project.projectDir}/src/app")
    args = ['run-script','build']
    doFirst {
        println ">> Building app"
    }
}

task assembleApp(dependsOn: 'buildApp') {
    group 'app'
    description 'Assemble app.'
    doFirst {
        println ">> Assembling app"
        def appSrc = 'src/app/dist'
        def appdist= 'src/main/webapp'
        delete 'src/main/webapp'
        copy {
            from appSrc
            into appdist
        }
    }
}
war.dependsOn("assembleApp")
bootRun.dependsOn("assembleApp")